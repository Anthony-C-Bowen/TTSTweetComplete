    public User saveNewUser(User user) {
        user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
        user.setActive(1);
        Role userRole = roleRepository.findByRole("USER");
        user.setRoles(new HashSet<Role>(Arrays.asList(userRole)));
        return userRepository.save(user);
    }
    
    Taken from TweetService
         private List<Tweet> formatTweets(List<Tweet> tweets) {
        addTagLinks(tweets);
        shortenLinks(tweets);
        return tweets;
    }
    
    From UserController
            List<User> users = userService.findAll();
            
            
            Taken from TweetService
            
                private List<TweetDisplay> formatTweets(List<Tweet> tweets) {
        addTagLinks(tweets);
        shortenLinks(tweets);
        List<TweetDisplay> displayTweets = formatTimestamps(tweets);
        return displayTweets;
        private List<TweetDisplay> formatTimestamps(List<TweetDisplay> tweets){
            List<TweetDisplay> response = new ArrayList<>();
            PrettyTime prettyTime = new PrettyTime();
            SimpleDateFormat simpleDate = new SimpleDateFormat("M/d/yy");
            Date now = new Date();
            for(Tweet tweet : tweets) {
                TweetDisplay tweetDisplay = new TweetDisplay();
                tweetDisplay.setUser(tweet.getUser());
                tweetDisplay.setMessage(tweet.getMessage());
                tweetDisplay.setTags(tweet.getTags());
                long diffInMillies = Math.abs(now.getTime() - tweet.getCreatedAt().getTime());
                long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                if (diff > 3) {
                    tweetDisplay.setDate(simpleDate.format(tweet.getCreatedAt()));
                }else {
                    tweetDisplay.setDate(prettyTime.format(tweet.getCreatedAt()));
                }
                response.add(tweetDisplay);
            }
            return response;
        } 
                
     }